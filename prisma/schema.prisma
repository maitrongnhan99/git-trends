// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  password          String?
  name              String?
  image             String?
  githubId          String?           @unique
  githubUsername    String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  repositories      Repository[]
  userPreferences   UserPreference?
  favoriteRepos     FavoriteRepo[]
}

model Repository {
  id                String            @id @default(uuid())
  name              String
  fullName          String            @unique
  description       String?
  url               String
  stars             Int               @default(0)
  forks             Int               @default(0)
  watchers          Int               @default(0)
  issues            Int               @default(0)
  language          String?
  lastCommitDate    DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            String?
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  favoriteRepos     FavoriteRepo[]

  @@index([userId])
}

model UserPreference {
  id                String            @id @default(uuid())
  darkMode          Boolean           @default(false)
  defaultView       String            @default("grid")
  userId            String            @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model TrendingRepo {
  id                String            @id @default(uuid())
  name              String
  fullName          String            @unique
  description       String?
  url               String
  stars             Int               @default(0)
  forks             Int               @default(0)
  language          String?
  trendingDate      DateTime          @default(now())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model FavoriteRepo {
  id                String            @id @default(uuid())
  userId            String
  repositoryId      String
  createdAt         DateTime          @default(now())
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  repository        Repository        @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([userId, repositoryId])
  @@index([userId])
  @@index([repositoryId])
}
