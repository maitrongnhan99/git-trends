generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  password        String?
  name            String?
  image           String?
  githubId        String?         @unique
  githubUsername  String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  favoriteRepos   FavoriteRepo[]
  repositories    Repository[]
  userPreferences UserPreference?
}

model Repository {
  id             String         @id @default(uuid())
  name           String
  fullName       String         @unique
  description    String?
  url            String
  stars          Int            @default(0)
  forks          Int            @default(0)
  watchers       Int            @default(0)
  issues         Int            @default(0)
  language       String?
  lastCommitDate DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         String?
  favoriteRepos  FavoriteRepo[]
  user           User?          @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserPreference {
  id          String   @id @default(uuid())
  darkMode    Boolean  @default(false)
  defaultView String   @default("grid")
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TrendingRepo {
  id           String   @id @default(uuid())
  name         String
  fullName     String   @unique
  description  String?
  url          String
  stars        Int      @default(0)
  forks        Int      @default(0)
  language     String?
  trendingDate DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model FavoriteRepo {
  id           String     @id @default(uuid())
  userId       String
  repositoryId String
  createdAt    DateTime   @default(now())
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, repositoryId])
  @@index([userId])
  @@index([repositoryId])
}
